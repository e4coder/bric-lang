use crate::ast::block::Block;
use crate::ast::expression::{Expr, BinaryOpcode, UnaryOpcode};
use crate::ast::program::Program;
use crate::ast::statement::Statement;
use crate::ast::functions::{FunctionParam, FunctionBlock, FunctionArg};
use crate::ast::item::Item;
use crate::ast::value::{Type, Value};
use crate::ast::utils::append;

use std::str::FromStr;

grammar;

Identifier: String = {
    r"[a-zA-Z][a-zA-z_0-9]*" => <>.to_owned()
};

IntNum: i32 = {
    r"-?[0-9]+" => i32::from_str(<>).unwrap()
};

FloatNum: f32 = {
    r"-?[0-9]+\.[0-9]+" => f32::from_str(<>).unwrap()
};

StringLiteral: String = {
    r#""[^"]*""# => <>[1..<>.len() - 1].to_owned()
};

BoolLiteral: bool = {
    "true" => true,
    "false" => false,
};

Term: Box<Expr> = {
    IntNum => Box::new(Expr::Constant(Value::Int(<>))),
    FloatNum => Box::new(Expr::Constant(Value::Float(<>))),
    StringLiteral => Box::new(Expr::Constant(Value::String(<>))),
    BoolLiteral => Box::new(Expr::Constant(Value::Bool(<>))),
    Identifier => Box::new(Expr::Identifier(<>)),
    "(" <Expr> ")"
};

pub Expr: Box<Expr> = {
    Disjunction
}

Disjunction: Box<Expr> = {
    Disjunction DisjOp Conjunction => Box::new(Expr::BinaryOp(<>)),
    Conjunction,
};

DisjOp: BinaryOpcode = {
    "||" => BinaryOpcode::Disj,
}

Conjunction: Box<Expr> = {
    Conjunction ConjOp Comparison => Box::new(Expr::BinaryOp(<>)),
    Comparison,
};

ConjOp: BinaryOpcode = {
    "&&" => BinaryOpcode::Conj,
}

Comparison: Box<Expr> = {
    Summ CompareOp Summ => Box::new(Expr::BinaryOp(<>)),
    Summ,
};

CompareOp: BinaryOpcode = {
    "==" => BinaryOpcode::Equals,
    "!=" => BinaryOpcode::NotEquals,
    "<" => BinaryOpcode::Lower,
    ">" => BinaryOpcode::Greater,
    "<=" => BinaryOpcode::LowerEquals,
    ">=" => BinaryOpcode::GreaterEquals,
}

Type: Type = {
    "Int" => Type::Int,
    "String" => Type::String,
    "Float" => Type::Float,
    "Bool" => Type::Bool,
}

Summ: Box<Expr> = {
    Summ SummOp Factor => Box::new(Expr::BinaryOp(<>)),
    Factor,
};

SummOp: BinaryOpcode = {
    "+" => BinaryOpcode::Add,
    "-" => BinaryOpcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp UnaryResult => Box::new(Expr::BinaryOp(<>)),
    UnaryResult,
};

FactorOp: BinaryOpcode = {
    "*" => BinaryOpcode::Mul,
    "/" => BinaryOpcode::Div,
};

UnaryResult: Box<Expr> = {
    UnaryOp Term => Box::new(Expr::UnaryOp(<>)),
    Term,
};

UnaryOp: UnaryOpcode = {
    "!" => UnaryOpcode::Not,
}

Statement: Statement = {
    // "let" <Identifier> ":" <Type> "=" <Expr> ";" => Statement::new_definition(<>),
    <VariableDeclarationStatement>,
    <FunctionStatement>,
    <FunctionCallStatement>,
    <Identifier> "=" <Expr> ";" => Statement::new_assignment(<>),
    Block => Statement::new_block(<>),
    <FunctionReturnStatement>,
};

Statements: Vec<Statement> = {
    Statement => vec![<>],
    Statements Statement => append(<>),
};

Block: Block = {
    "{" <Statements> "}" => Block::new_statements(<>),
    "if" <Expr> "{" <Statements> "}" => Block::new_condition(<>, None),
    "if" <exp:Expr> "{" <thn:Statements> "}" "else" "{" <els:Statements> "}" => Block::new_condition(exp, thn, Some(els)),
    "loop" "{" <Statements> "}" => Block::new_loop(<>),
    "while" <Expr> "{" <Statements> "}" => Block::new_while(<>),
}

FunctionBlock: FunctionBlock = {
    "{" <Statements> "}" => FunctionBlock::new_function_block(<>),
}

FunctionParam: FunctionParam = {
    <Identifier> ":" <Type> => FunctionParam::new_param(<>),
}

FunctionParams: Vec<FunctionParam> = {
    FunctionParam => vec![<>],
    <ps:FunctionParams> "," <p2:FunctionParam> => append(ps, p2),
}

FunctionArg: FunctionArg = {
    <Expr> => FunctionArg::new_arg(<>),
}

FunctionArgs: Vec<FunctionArg> = {
    FunctionArg => vec![<>],
    <ars:FunctionArgs> "," <ar2:FunctionArg> => append(ars, ar2),
}

FunctionItem: Item = {
    "fn" <i:Identifier> "(" ")" <b:FunctionBlock> => Item::new_function(i, None, None, b),
    "fn" <i:Identifier> "(" <p:FunctionParams> ")" <b:FunctionBlock> => Item::new_function(i,Some(p),None,b),
    "fn" <i:Identifier> "(" <p:FunctionParams> ")" "->" <t:Type> <b:FunctionBlock> => Item::new_function(i,Some(p),Some(t),b),
    "fn" <i:Identifier> "(" ")" "->" <t:Type> <b:FunctionBlock> => Item::new_function(i, None, Some(t), b),
}

FunctionStatement: Statement = {
    "fn" <i:Identifier> "(" ")" <b:FunctionBlock> => Statement::new_function(i, None, None, b),
    "fn" <i:Identifier> "(" <p:FunctionParams> ")" <b:FunctionBlock> => Statement::new_function(i,Some(p),None,b),
    "fn" <i:Identifier> "(" <p:FunctionParams> ")" "->" <t:Type> <b:FunctionBlock> => Statement::new_function(i,Some(p),Some(t),b),
    "fn" <i:Identifier> "(" ")" "->" <t:Type> <b:FunctionBlock> => Statement::new_function(i, None, Some(t), b),
}

FunctionCallStatement: Statement = {
    <i:Identifier> "(" ")" ";" => Statement::new_function_call(i, None),
    <i:Identifier> "(" <args:FunctionArgs> ")" ";" => Statement::new_function_call(i, Some(args)),
}

FunctionReturnStatement: Statement = {
    "return" ";" => Statement::new_return_statement(None),
    "return" <i:Expr> ";" => Statement::new_return_statement(Some(i)),
}

VariableDeclarationStatement: Statement = {
    "let" <i:Identifier> ":" <t:Type> ";" => Statement::new_definition(i, t, None),
    "let" <i:Identifier> ":" <t:Type> "=" <e:Expr> ";" => Statement::new_definition(i, t, Some(e)),
}

Item: Item = {
    FunctionItem
}

Items: Vec<Item> = {
    Item => vec![<>],
    Items Item => append(<>)
}

pub Program: Program = {
    <Items> => Program::new(<>)
}